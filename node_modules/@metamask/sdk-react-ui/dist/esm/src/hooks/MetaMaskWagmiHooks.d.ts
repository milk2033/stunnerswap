import { Chain } from 'wagmi';
export * from 'wagmi';
export declare const useAccount: () => import("@wagmi/core").GetAccountResult<import("@wagmi/core/dist/index-e744bbc2").P<import("viem").Transport<string, Record<string, any>, import("viem").EIP1193RequestFn<undefined>>, Chain<import("viem").Formatters | undefined, import("viem").Serializers<import("viem").Formatters | undefined> | undefined>>>;
export declare const useConnect: () => {
    readonly connect: (args?: Partial<import("@wagmi/core").ConnectArgs> | undefined) => void;
    readonly connectAsync: (args?: Partial<import("@wagmi/core").ConnectArgs> | undefined) => Promise<import("@wagmi/core").ConnectResult<import("@wagmi/core/dist/index-e744bbc2").P<import("viem").Transport<string, Record<string, any>, import("viem").EIP1193RequestFn<undefined>>, Chain<import("viem").Formatters | undefined, import("viem").Serializers<import("viem").Formatters | undefined> | undefined>>>>;
    readonly connectors: import("@wagmi/connectors/dist/base-24d0a67f").C<any, any>[];
    readonly data: import("@wagmi/core").ConnectResult<import("@wagmi/core/dist/index-e744bbc2").P<import("viem").Transport<string, Record<string, any>, import("viem").EIP1193RequestFn<undefined>>, Chain<import("viem").Formatters | undefined, import("viem").Serializers<import("viem").Formatters | undefined> | undefined>>> | undefined;
    readonly error: Error | null;
    readonly isError: boolean;
    readonly isIdle: boolean;
    readonly isLoading: boolean;
    readonly isSuccess: boolean;
    readonly pendingConnector: import("@wagmi/connectors/dist/base-24d0a67f").C<any, any> | undefined;
    readonly reset: () => void;
    readonly status: "error" | "success" | "loading" | "idle";
    readonly variables: import("@wagmi/core").ConnectArgs | undefined;
};
export declare const useSwitchOrAddNetwork: () => {
    chains: Chain<import("viem").Formatters | undefined, import("viem").Serializers<import("viem").Formatters | undefined> | undefined>[];
    error: unknown;
    isLoading: boolean | undefined;
    pendingChainId: number | undefined;
    switchOrAddNetwork: (chain: Chain) => Promise<any>;
};
//# sourceMappingURL=MetaMaskWagmiHooks.d.ts.map